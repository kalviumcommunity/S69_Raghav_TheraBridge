import type { Document } from '.mongodb-68UHUK8p/src/bson';
import { Collection } from '.mongodb-68UHUK8p/src/collection';
import type { Server } from '.mongodb-68UHUK8p/src/sdam/server';
import type { ClientSession } from '.mongodb-68UHUK8p/src/sessions';
import { type TimeoutContext } from '.mongodb-68UHUK8p/src/timeout';
import { MongoDBNamespace } from '.mongodb-68UHUK8p/src/utils';
import { CommandOperation, type CommandOperationOptions } from '.mongodb-68UHUK8p/src/operations/command';
import { Aspect, defineAspects } from '.mongodb-68UHUK8p/src/operations/operation';

/** @public */
export interface RenameOptions extends CommandOperationOptions {
  /** Drop the target name collection if it previously exists. */
  dropTarget?: boolean;
  /** Unclear */
  new_collection?: boolean;
}

/** @internal */
export class RenameOperation extends CommandOperation<Document> {
  constructor(
    public collection: Collection,
    public newName: string,
    public override options: RenameOptions
  ) {
    super(collection, options);
    this.ns = new MongoDBNamespace('admin', '$cmd');
  }

  override get commandName(): string {
    return 'renameCollection' as const;
  }

  override async execute(
    server: Server,
    session: ClientSession | undefined,
    timeoutContext: TimeoutContext
  ): Promise<Collection> {
    // Build the command
    const renameCollection = this.collection.namespace;
    const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();
    const dropTarget =
      typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;

    const command = {
      renameCollection: renameCollection,
      to: toCollection,
      dropTarget: dropTarget
    };

    await super.executeCommand(server, session, command, timeoutContext);
    return new Collection(this.collection.s.db, this.newName, this.collection.s.options);
  }
}

defineAspects(RenameOperation, [Aspect.WRITE_OPERATION]);
